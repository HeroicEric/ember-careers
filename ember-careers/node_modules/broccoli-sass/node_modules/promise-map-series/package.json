{
  "name": "promise-map-series",
  "description": "Map over array avoiding parallel execution, using promises",
  "version": "0.2.0",
  "author": {
    "name": "Jo Liss",
    "email": "joliss42@gmail.com"
  },
  "main": "index.js",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/joliss/promise-map-series"
  },
  "dependencies": {
    "rsvp": "^3.0.6"
  },
  "devDependencies": {
    "tape": "^2.5.0"
  },
  "scripts": {
    "test": "tape test.js"
  },
  "readme": "# promise-map-series\n\n[![Build Status](https://travis-ci.org/joliss/promise-map-series.png?branch=master)](https://travis-ci.org/joliss/promise-map-series)\n\nCall an iterator function for each element of an array in series, ensuring\nthat no iterator is called before the promise returned by the previous\niterator is fulfilled, in effect preventing parallel execution. Like\n[async.mapSeries](https://github.com/caolan/async#mapseriesarr-iterator-callback),\nbut for promises.\n\n## Installation\n\n```bash\nnpm install --save promise-map-series\n```\n\n## Usage\n\n```js\nvar mapSeries = require('promise-map-series')\n\nmapSeries(array, iterator[, thisArg]).then(function (newArray) {\n  ...\n})\n```\n\n* **`array`**: An array of values (should not be promises).\n\n* **`iterator`**: Function that returns a promise or a value for the new\n  array. The `iterator` will be called once for each element. If `iterator`\n  returns a promise, then `iterator` will only be called for the next element\n  once that promise is fulfilled. If the promise is rejected or `iterator`\n  throws an error, iteration will stop immediately and `mapSeries` returns a\n  rejected promise. The `iterator` function receives three arguments:\n\n    * **`item`**: The current item in the array.\n\n    * **`index`**: The current index in the array.\n\n    * **`array`**: The original `array` argument.\n\n* **`thisArg`** (optional): Value to use as `this` when executing `iterator`.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/joliss/promise-map-series/issues"
  },
  "homepage": "https://github.com/joliss/promise-map-series",
  "_id": "promise-map-series@0.2.0",
  "_from": "promise-map-series@^0.2.0"
}
