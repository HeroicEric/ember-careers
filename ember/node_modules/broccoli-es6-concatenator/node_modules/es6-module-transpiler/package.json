{
  "name": "es6-module-transpiler",
  "version": "0.3.6",
  "description": "es6-module-transpiler is an experimental compiler that allows you to write your JavaScript using a subset of the current ES6 module syntax, and compile it into AMD, CommonJS, and globals styles.",
  "homepage": "http://square.github.com/es6-module-transpiler",
  "keywords": [
    "es6",
    "module",
    "transpile",
    "amd",
    "commonjs"
  ],
  "bugs": {
    "url": "https://github.com/square/es6-module-transpiler/issues"
  },
  "bin": {
    "compile-modules": "./bin/compile-modules"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./dist/es6-module-transpiler",
  "repository": {
    "type": "git",
    "url": "https://github.com/square/es6-module-transpiler.git"
  },
  "dependencies": {
    "optimist": "~0.3.5",
    "through": "~2.3.4"
  },
  "scripts": {
    "test": "grunt build && grunt test",
    "prepublish": "grunt build && grunt test"
  },
  "devDependencies": {
    "es6ify": "~0.2.0",
    "esprima": "git://github.com/thomasboyt/esprima#4be906f1abcbb",
    "grunt": "~0.4.1",
    "grunt-browserify": "~1.2.0",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-es6-module-transpiler": "~0.4.1",
    "grunt-simple-mocha": "~0.4.0",
    "matchdep": "~0.1.2",
    "mocha": "~1.12.0",
    "qunit-mocha-ui": "0.0.4",
    "uglify-js": "~2.2.4",
    "grunt-contrib-jshint": "~0.6.2"
  },
  "readme": "# ES6 Module Transpiler [![Build Status](https://travis-ci.org/square/es6-module-transpiler.png)](https://travis-ci.org/square/es6-module-transpiler)\n\nES6 Module Transpiler is an experimental compiler that allows you to write your\nJavaScript using a subset of the current ES6 module syntax, and compile it into\nAMD or CommonJS modules.\n\n**WARNING: The ES6 module syntax is still undergoing a lot of churn, and will\nlikely change before final approval.**\n\n**ES6 Module Transpiler will track ES6 syntax, and not attempt to maintain\nbackwards compatibility with syntax that ultimately did not succeed as part of\nES6.**\n\nThis compiler provides a way to experiment with ES6 syntax in real world\nscenarios to see how the syntax holds up. It also provides a nicer, more\ndeclarative way to write AMD (or CommonJS) modules.\n\nSee the [CHANGELOG](./CHANGELOG.md) for the latest updates.\n\n## Usage\n\n### Executable\n\nThe easiest way to use the transpiler is via the command line:\n\n```\n$ npm install -g https://git.squareup.com/javascript/es6-module-transpiler\n$ compile-modules foo.js --to compiled\n```\n\nHere is the basic usage:\n\n```\ncompile-modules FILE [FILEâ€¦] --to OUTPUT [--type=TYPE]\n  [--anonymous] [--module-name=NAME]\n  [--global=GLOBAL] [--imports=IMPORTS]\n\nFILE\n  An input file relative to the current directory to process.\n\nOUTPUT\n  An output directory relative to the current directory.  If it does not exist,\n  it will be created.\n\nTYPE\n  One of `amd` (for AMD output), `cjs` (for CommonJS output), `yui` (for YUI\n  output).\n\nANONYMOUS\n  If you use the --anonymous flag with the AMD type, the transpiler will output\n  a module with no name.\n\nNAME\n  You can supply a name to use as the module name.  By default, the transpiler\n  will use the name of the file (without the ending `.js`) as the module name.\n  You may not use this option if you provided multiple FILEs.\n\nGLOBAL\n  This option is only supported when the type is `globals`. By default, the\n  `globals` option will attach all of the exports to `window`. This option will\n  attach the exports to a single named variable on `window` instead.\n\nIMPORTS\n  This option is only supported when the type is\n  `globals`. It is a hash option. If your module\n  includes imports, you must use this option to\n  map the import names onto globals. For example,\n  `--imports ember:Ember underscore:_`\n```\n\n### Library\n\nYou can also use the transpiler as a library:\n\n```javascript\nvar Compiler = require(\"es6-module-transpiler\").Compiler;\n\nvar compiler = new Compiler(inputString, moduleName);\nvar output = compiler.toAMD(); // AMD output as a string\n```\n\nIf you want to emit globals output, and your module has imports, you must\nsupply an `imports` hash. You can also use the `global` option to specify that\nexports should be added to a single global instead of `window`.\n\n```javascript\nvar Compiler = require(\"es6-module-transpiler\").Compiler;\n\nvar imports = { underscore: \"_\", ember: \"Ember\" };\nvar options = { imports: imports, global: \"RSVP\" };\n\nvar compiler = new Compiler(string, name, options);\ncompiler.toGlobals() // window global output\n```\n\nThe `string` parameter is a string of JavaScript written using the declarative\nmodule syntax.\n\nThe `name` parameter is an optional name that should be used as the name of the\nmodule if appropriate (for AMD, this maps onto the first parameter to the\n`define` function).\n\n## Supported ES6 Module Syntax\n\nAgain, this syntax is in flux and is closely tracking the module work being\ndone by TC39.\n\n### Named Exports\n\nThere are two types of exports. *Named exports* like the following:\n\n```javascript\n// foobar.js\nvar foo = \"foo\", bar = \"bar\";\n\nexport { foo, bar };\n```\n\nThis module has two named exports, `foo` and `bar`.\n\nYou can also write this form as:\n\n```javascript\n// foobar.js\nexport var foo = \"foo\";\nexport var bar = \"bar\";\n```\n\nEither way, another module can then import your exports like so:\n\n```js\nimport { foo, bar } from \"foobar\";\n\nconsole.log(foo);  // \"foo\"\n```\n\n### Default Exports\n\nYou can also export a *default* export. For example, an ES6ified jQuery might\nlook like this:\n\n```javascript\n// jquery.js\nvar jQuery = function() {};\n\njQuery.prototype = {\n  // ...\n};\n\nexport default = jQuery;\n```\n\nThen, an app that uses jQuery could import it with:\n\n```javascript\nimport $ from \"jquery\";\n```\n\nThe default export of the \"jquery\" module is now aliased to `$`.\n\nA default export makes the most sense as a module's \"main\" export, like the\n`jQuery` object in jQuery. You can use default and named exports in parallel.\n\n### Other Syntax\n\n#### `module`\n\nWhereas the `import` keyword imports specific identifiers from a module,\nthe `module` keyword creates an object that contains all of a module's\nexports:\n\n```js\nmodule foobar from \"foobar\";\nconsole.log(foobar.foo);  // \"foo\"\n```\n\nIn ES6, this created object is *read-only*, so don't treat it like a mutable\nnamespace!\n\n#### `import \"foo\";`\n\nA \"bare import\" that doesn't import any identifiers is useful for executing\nside effects in a module. For example:\n\n```js\n// alerter.js\nalert(\"alert! alert!\");\n\n// alertee.js\nimport \"alerter\";  // will pop up alert box\n```\n\n## Compiled Output\n\n### Default Exports\n\nThis is super important:\n\n**Default exports bind to an identifier on the module called `default`!**\n\nInternally, the transpiler will use this default identifer when importing, but\nany outside consumer needs to be aware that it should use the `default` key and\nnot the module itself. For example, an AMD consumer should look like this:\n\n```js\ndefine([\"jquery\"],\n  function(jQuery) {\n    var $ = jQuery['default'];\n  });\n```\n\nIn general, if your project wants to create a \"native\" module for AMD, YUI, CJS,\nor globals, you should wrap modules with default exports like so:\n\n```js\n// AMD wrapper\ndefine(\"jquery-amd\",\n  [\"jquery\"],\n  function(jQuery) {\n    return jQuery['default'];\n  });\n\n// consumer\ndefine([\"jquery-amd\"],\n  function($) {\n    // $ is now bound to jQuery['default']\n  });\n```\n\nThe reason for all of this extra boilerplate is that ES6 modules support\na module having both default and named exports, whereas AMD, YUI and CJS do not.\n\n### Individual Exports\n\nThis input (ember.js):\n\n```javascript\nvar get = function(obj, key) {\n  return obj[key];\n};\n\nvar set = function(obj, key, value) {\n  obj[key] = value;\n  return obj;\n};\n\nexport { get, set };\n```\n\nwill compile into this AMD output:\n\n```javascript\ndefine(\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var get = function(obj, key) {\n      return obj[key];\n    };\n\n    var set = function(obj, key, value) {\n      obj[key] = value;\n      return obj;\n    };\n\n    __exports__.get = get;\n    __exports__.set = set;\n  });\n```\n\nThe output is the same whether you use the single-line export (`export { get,\nset }`) or multiple export lines, as above.\n\n### Individual Imports\n\nThis input:\n\n```javascript\nimport { get, set } from \"ember\";\n```\n\nwill compile into this AMD output:\n\n```javascript\ndefine(\n  [\"ember\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var get = __dependency1__.get;\n    var set = __dependency1__.set;\n  });\n```\n\n## Using with Node.js/Grunt\n\nYou can use this library to pre-transpile your browser code or your node\npackages however you wish, but the easiest way to do it is probably to use the\n[grunt-es6-module-transpiler](http://github.com/joefiorini/grunt-es6-module-transpiler)\nplugin to run the transpiler as part of your [Grunt.js](http://gruntjs.com)\nbuild task. See the README on the plugin's Github page for more information.\n\n## Installation\n\nAdd this project to your application's package.json by running this:\n\n    $ npm install --save es6-module-transpiler\n\nOr install it globally:\n\n    $ sudo npm install -g es6-module-transpiler\n\n## Acknowledgements\n\nThanks to [Yehuda Katz](https://twitter.com/wycats) for\n[js_module_transpiler](https://github.com/wycats/js_module_transpiler), the\nlibrary on which this one is based. Thanks to [Dave\nHerman](https://twitter.com/littlecalculist) for his work on ES6 modules.\nThanks to [Erik Bryn](https://twitter.com/ebryn) for providing the initial push\nto write this library. Thanks to [Domenic\nDenicola](https://twitter.com/domenic) & [Thomas\nBoyt](https://twitter.com/thomasaboyt) for their efforts to make this project\neven better. And finally thanks to the JavaScript community at Square for\nhelping to write and release this library.\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\nAny contributors to the master es6-module-transpiler repository must sign the\n[Individual Contributor License Agreement (CLA)][cla].  It's a short form that\ncovers our bases and makes sure you're eligible to contribute.\n\n[cla]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1\n\nWhen you have a change you'd like to see in the master repository, [send a pull\nrequest](https://github.com/square/es6-module-transpiler/pulls). Before we merge\nyour request, we'll make sure you're in the list of people who have signed a\nCLA.\n\nThanks, and enjoy living in the ES6 future!\n",
  "readmeFilename": "README.md",
  "_id": "es6-module-transpiler@0.3.6",
  "_from": "es6-module-transpiler@^0.3.6"
}
