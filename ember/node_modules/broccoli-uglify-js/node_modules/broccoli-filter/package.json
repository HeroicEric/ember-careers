{
  "name": "broccoli-filter",
  "description": "Helper base class for Broccoli plugins that map input files into output files one-to-one",
  "version": "0.1.4",
  "author": {
    "name": "Jo Liss",
    "email": "joliss42@gmail.com"
  },
  "main": "index.js",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/joliss/broccoli-filter"
  },
  "keywords": [
    "broccoli-helper",
    "filter",
    "cache"
  ],
  "dependencies": {
    "quick-temp": "^0.1.0",
    "mkdirp": "^0.3.5",
    "rsvp": "^3.0.3",
    "broccoli-transform": "^0.1.0",
    "walk-sync": "^0.1.0",
    "broccoli-kitchen-sink-helpers": "^0.1.0"
  },
  "readme": "# broccoli-filter\n\nHelper base class for Broccoli plugins that map input files into output files\none-to-one.\n\nDocumentation to follow.\n\n**Can this help with compilers that are almost 1:1, like a minifier that takes\na `.js` and `.js.map` file and outputs a `.js` and `.js.map` file?**\n\nNot at the moment. I don't know yet how to implement this and still have the\nAPI look beautiful. We also have to make sure that caching works correctly, as\nwe have to invalidate if either the `.js` or the `.js.map` file changes. My\nplan is to write a source-map-aware uglifier plugin to understand this use\ncase better, and then extract common code back into this `Filter` base class.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/joliss/broccoli-filter/issues"
  },
  "homepage": "https://github.com/joliss/broccoli-filter",
  "_id": "broccoli-filter@0.1.4",
  "_from": "broccoli-filter@^0.1.4"
}
