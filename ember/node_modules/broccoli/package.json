{
  "name": "broccoli",
  "description": "Fast client-side asset builder",
  "version": "0.7.2",
  "author": {
    "name": "Jo Liss",
    "email": "joliss42@gmail.com"
  },
  "main": "lib/index.js",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/joliss/broccoli"
  },
  "dependencies": {
    "handlebars": "^1.3.0",
    "commander": "^2.0.0",
    "findup-sync": "^0.1.2",
    "tiny-lr": "0.0.5",
    "rsvp": "^3.0.3",
    "ncp": "^0.5.0",
    "quick-temp": "^0.1.1",
    "bower-config": "^0.5.0",
    "connect": "~2.14.1",
    "send": "~0.2.0",
    "broccoli-kitchen-sink-helpers": "^0.2.0"
  },
  "devDependencies": {
    "jshint": "~2.3.0"
  },
  "scripts": {
    "test": "jshint lib/*.js"
  },
  "readme": "# Broccoli\n\n[![Build Status](https://travis-ci.org/joliss/broccoli.png?branch=master)](https://travis-ci.org/joliss/broccoli)\n\nA fast, reliable asset pipeline, supporting constant-time rebuilds and compact\nbuild definitions. Comparable to the Rails asset pipeline in scope, though it\nruns on Node and is backend-agnostic. For background and architecture, see the\n[introductory blog post](http://www.solitr.com/blog/2014/02/broccoli-first-release/).\n\nFor the command line interface, see\n[broccoli-cli](https://github.com/joliss/broccoli-cli).\n\n**This is 0.x beta software.**\n\nWindows is not yet supported.\n\n## Installation\n\n```bash\nnpm install --save broccoli\nnpm install --global broccoli-cli\n```\n\n## Getting Started\n\nCheck out\n[broccoli-sample-app](https://github.com/joliss/broccoli-sample-app).\n\n## Brocfile.js\n\nA `Brocfile.js` file in the project root contains the build specification. It\nhas the following format:\n\n```js\nmodule.exports = function (broccoli) {\n};\n```\n\nThe function must return a tree object, which is typically created using a\nBroccoli plugin.\n\n## Plugins\n\n* [broccoli-coffee](https://github.com/joliss/broccoli-coffee)\n* [broccoli-template](https://github.com/joliss/broccoli-template)\n* [broccoli-static-compiler](https://github.com/joliss/broccoli-static-compiler)\n* [broccoli-uglify-js](https://github.com/joliss/broccoli-uglify-js)\n* [broccoli-es6-concatenator](https://github.com/joliss/broccoli-es6-concatenator)\n* [broccoli-es6-module-filter](https://github.com/rpflorence/broccoli-es6-module-filter)\n* [broccoli-sass](https://github.com/joliss/broccoli-sass)\n* [broccoli-swig](https://github.com/shanielh/broccoli-swig)\n* [broccoli-replace](https://github.com/outaTiME/broccoli-replace)\n* [broccoli-autoprefixer](https://github.com/sindresorhus/broccoli-autoprefixer)\n* [broccoli-svgo](https://github.com/sindresorhus/broccoli-svgo)\n* [broccoli-csso](https://github.com/sindresorhus/broccoli-csso)\n* [broccoli-htmlmin](https://github.com/sindresorhus/broccoli-htmlmin)\n* [broccoli-jade](https://github.com/sindresorhus/broccoli-jade)\n* [broccoli-uncss](https://github.com/sindresorhus/broccoli-uncss)\n* [broccoli-strip-debug](https://github.com/sindresorhus/broccoli-strip-debug)\n* [broccoli-traceur](https://github.com/sindresorhus/broccoli-traceur)\n* [broccoli-sweetjs](https://github.com/sindresorhus/broccoli-sweetjs)\n* [broccoli-closure-compiler](https://github.com/sindresorhus/broccoli-closure-compiler)\n* [broccoli-regenerator](https://github.com/sindresorhus/broccoli-regenerator)\n* [broccoli-defeatureify](https://github.com/sindresorhus/broccoli-defeatureify)\n* [broccoli-nunjucks](https://github.com/sindresorhus/broccoli-nunjucks)\n* [broccoli-dust](https://github.com/sindresorhus/broccoli-dust)\n* [broccoli-strip-json-comments](https://github.com/sindresorhus/broccoli-strip-json-comments)\n* [broccoli-es6-transpiler](https://github.com/sindresorhus/broccoli-es6-transpiler)\n\nMore plugins may be found under the [broccoli-plugin\nkeyword](https://www.npmjs.org/browse/keyword/broccoli-plugin) on npm.\n\n### Plugging Broccoli Into Other Tools\n\n* [grunt-broccoli](https://github.com/quandl/grunt-broccoli)\n* [grunt-broccoli-build](https://github.com/ericf/grunt-broccoli-build)\n\n### Helpers\n\nShared code for writing plugins.\n\n* [broccoli-filter](https://github.com/joliss/broccoli-filter)\n* [broccoli-transform](https://github.com/joliss/broccoli-transform)\n* [broccoli-env](https://github.com/joliss/broccoli-env)\n* [node-quick-temp](https://github.com/joliss/node-quick-temp)\n\n## Plugin API Specification\n\nBroccoli defines a single plugin API: a tree. A tree object represents a tree\n(directory hierarchy) of files that can be regenerated on each build.\n\nBy convention, plugins will export a function that takes one or more input\ntrees, and returns an output tree object.\n\nA tree object must supply two methods that will be called by Broccoli:\n\n### `tree.read(readTree)`\n\nThe `.read` method must return a path or a promise for a path, containing the\ntree contents.\n\nIt receives a `readTree` function argument from Broccoli. If `.read` needs to\nread other trees, it must not call `otherTree.read` directly. Instead, it must\ncall `readTree(otherTree)`, which returns a promise for the path containing\n`otherTree`'s contents. It must not call `readTree` again until the promise\nhas resolved; that is, it cannot call `readTree` on multiple trees in\nparallel.\n\nBroccoli will call the `.read` method repeatedly to rebuild the tree, but at\nmost once per rebuild; that is, if a tree is used multiple times in a build\ndefinition, Broccoli will reuse the path returned instead of calling `.read`\nagain.\n\nThe `.read` method is responsible for creating a new temporary directory to\nstore the tree contents in. Subsequent invocations of `.read` should remove\ntemporary directories created in previous invocations.\n\n### `tree.cleanup()`\n\nFor every tree whose `.read` method was called one or more times, the\n`.cleanup` method will be called exactly once. No further `.read` calls will\nfollow `.cleanup`. The `.cleanup` method should remove all temporary\ndirectories created by `.read`.\n\n## Security\n\n* Do not run `broccoli serve` on a production server. While this is\n  theoretically safe, it exposes a needlessly large amount of attack surface\n  just for serving static assets. Instead, use `broccoli build` to precompile\n  your assets, and serve the static files from a web server of your choice.\n\n## Get Help\n\n* IRC: `#broccolijs` on Freenode\n* Twitter: mention @jo_liss with your question\n* GitHub: Open an issue on a specific plugin repository, or on this\n  repository for general questions.\n\n## License\n\nBroccoli was originally written by [Jo Liss](http://www.solitr.com/) and is\nlicensed under the [MIT license](LICENSE.md).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/joliss/broccoli/issues"
  },
  "homepage": "https://github.com/joliss/broccoli",
  "_id": "broccoli@0.7.2",
  "_from": "broccoli@0.7.2"
}
