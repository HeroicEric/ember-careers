{
  "name": "fleck",
  "description": "a functional-style string inflection library",
  "version": "0.5.1",
  "keywords": [
    "fleck",
    "ender",
    "sting",
    "inflection",
    "pluralize"
  ],
  "homepage": "http://github.com/trek/fleck",
  "author": {
    "name": "Trek Glowacki",
    "email": "trek.glowacki@gmail.com",
    "url": "http://github.com/trek"
  },
  "contributors": [
    {
      "name": "Joe Fiorini",
      "url": "https://github.com/joefiorini"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/trek/fleck.git"
  },
  "main": "./public/javascripts/fleck.js",
  "ender": "noop",
  "readme": "`fleck` is a functional styled library for string inflection that doesn't pollute `String.prototype`.\n\nBasic Use\n======\nAll the inflections are stored inside `fleck`.  They are:\n  \n  // Capitals\n  fleck.capitalize('acme') == 'Acme'\n  \n  // CamelCase and camelCase\n  fleck.camelize('border-radius') == 'borderRadius'\n  fleck.camelize('border-radius', true) == 'BorderRadius' // alias for upperCamelize\n  fleck.upperCamelize('we-the-people') == 'WeThePeople'\n  \n  // Changes underscores and spaces into dashes\n  fleck.dasherize('we_the_people') == 'we-the-people'\n  \n  // Underscore\n  // Converts camelCase, CamelCase, dash-es, and Name::Spaced to underscores\n  fleck.underscore(\"camelCase\") == 'camel_case'\n  fleck.underscore(\"CamelCase\") == 'camel_case'\n  fleck.underscore(\"dash-es\")   == 'dash_es'\n  fleck.underscore(\"Name::Spaced\") == 'name_spaced'\n  \n  // Plurals and Singular, even strange ones\n  fleck.pluralize('dog') == 'dogs'\n  fleck.pluralize('person') == 'people'\n  fleck.pluralize('sheep') == 'sheep'\n  fleck.singularize('dogs') == 'dog'\n  fleck.singularize('people') == 'person'\n  \n  // Whitespace stripping\n  fleck.strip('    hello!   ') == 'hello!'\n  \n  // Ordinals\n  fleck.ordinalize(4) == \"4th\"\n  fleck.ordinalize(\"13\") == \"13th\"\n  fleck.ordinalize(\"122\") == \"122nd\"  \n\nFunctional Programing\n======\n`fleck` doesn't contain any unpredictable javascript object orientation. Feel free to combine \nwith other functional libraries at will; no new anonymous functions, no silly `bind`s:\n\n  // underscore.js\n  _.each(['dog','cat','mouse'], fleck.pluralize) == [\"dogs\", \"cats\", \"mice\"]\n  \n  // jQuery.js\n  $.ajax({\n    url:'/data/sync_from_server/new/uncountablewords',\n    success: fleck.uncountable\n  })\n\nChaining\n======\nInflections can be chained using `fleck.inflect`\n\n    fleck.inflect('     posts', 'strip', 'singularize', 'capitalize') == 'Post'\n",
  "readmeFilename": "README",
  "bugs": {
    "url": "https://github.com/trek/fleck/issues"
  },
  "_id": "fleck@0.5.1",
  "_from": "fleck@~0.5.1"
}
