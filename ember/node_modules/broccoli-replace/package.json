{
  "name": "broccoli-replace",
  "description": "Replace text patterns with applause.",
  "version": "0.1.5",
  "homepage": "http://github.com/outaTiME/broccoli-replace",
  "author": {
    "name": "outaTiME",
    "url": "http://outa.im/"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/outaTiME/broccoli-replace.git"
  },
  "bugs": {
    "url": "http://github.com/outaTiME/broccoli-replace/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/outaTiME/broccoli-replace/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "release": "scripts/release.sh",
    "test": "broccoli build temp && mocha"
  },
  "dependencies": {
    "broccoli-filter": "^0.1.0",
    "minimatch": "~0.2.14",
    "applause": "0.3.1"
  },
  "devDependencies": {
    "broccoli": "~0.1.1",
    "mocha": "*",
    "rimraf": "~2.2.6"
  },
  "keywords": [
    "broccoli-plugin",
    "replace",
    "replacement",
    "pattern",
    "patterns",
    "match",
    "text",
    "string",
    "regex",
    "regexp",
    "json",
    "yaml",
    "flatten"
  ],
  "main": "index.js",
  "files": [
    "index.js",
    "LICENSE-MIT"
  ],
  "readme": "# broccoli-replace [![Build Status](https://secure.travis-ci.org/outaTiME/broccoli-replace.png?branch=master)](http://travis-ci.org/outaTiME/broccoli-replace)\n\n> Replace text patterns with [applause](https://github.com/outaTiME/applause).\n\n\n\n## Install\n\nFrom NPM:\n\n```shell\nnpm install broccoli-replace --save-dev\n```\n\n## Replace Filter\n\nAssuming installation via NPM, you can use `broccoli-replace` in your broccolifile like this:\n\n```javascript\nmodule.exports = function (broccoli) {\n  var replace = require('broccoli-replace');\n  var srcFiles = broccoli.makeTree('src');\n  srcFiles = replace(srcFiles, {\n    files: [\n      '**/*.html' // replace only html files in src\n    ],\n    patterns: [\n      {\n        match: 'foo',\n        replacement: 'bar'\n      }\n    ]\n  });\n  return [srcFiles];\n};\n```\n\n### Options\n\n#### files\nType: `Array`\nDefault: `[]`\n\nDefine the source files that will be used for replacements, you can use globbing via [minimatch](https://github.com/isaacs/minimatch) library.\n\n> This is a mandatory value, an empty definition will ignore any kind of replacement.\n\n\n\n#### patterns\nType: `Array`\n\nDefine patterns that will be used to replace the contents of source files.\n\n#### patterns.match\nType: `String|RegExp`\n\nIndicates the matching expression.\n\nIf matching type is `String` we use a simple variable lookup mechanism `@@string` (in any other case we use the default regexp replace logic):\n\n```javascript\n{\n  patterns: [\n    {\n      match: 'foo',\n      replacement: 'bar'  // replaces \"@@foo\" to \"bar\"\n    }\n  ]\n}\n```\n\n#### patterns.replacement\nType: `String|Function|Object`\n\nIndicates the replacement for match, for more information about replacement check out the [String.replace].\n\nYou can specify a function as replacement. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string.\n\n```javascript\n{\n  patterns: [\n    {\n      match: /foo/g,\n      replacement: function () {\n        return 'bar'; // replaces \"foo\" to \"bar\"\n      }\n    }\n  ]\n}\n```\n\nAlso supports object as replacement (we create string representation of object using [JSON.stringify]):\n\n```javascript\n{\n  patterns: [\n    {\n      match: /foo/g,\n      replacement: [1, 2, 3] // replaces \"foo\" with string representation of \"array\" object\n    }\n  ]\n}\n```\n\n[String.replace]: http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n[JSON.stringify]: http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\n#### patterns.json\nType: `Object`\n\nIf an attribute `json` found in pattern definition we flatten the object using `delimiter` concatenation and each keyâ€“value pair will be used for the replacement (simple variable lookup mechanism and no regexp support).\n\n```javascript\n{\n  patterns: [\n    {\n      json: {\n        \"key\": \"value\" // replaces \"@@key\" to \"value\"\n      }\n    }\n  ]\n}\n```\n\nAlso supports nested objects:\n\n```javascript\n{\n  patterns: [\n    {\n      json: {\n        \"key\": \"value\",   // replaces \"@@key\" to \"value\"\n        \"inner\": {        // replaces \"@@inner\" with string representation of \"inner\" object\n          \"key\": \"value\"  // replaces \"@@inner.key\" to \"value\"\n        }\n      }\n    }\n  ]\n}\n```\n\n#### patterns.yaml\nType: `String`\n\nIf an attribute `yaml` found in pattern definition will be converted and then processed like [json attribute](#patternsjson).\n\n```javascript\n{\n  patterns: [\n    {\n      yaml: 'key: value'  // replaces \"@@key\" to \"value\"\n    }\n  ]\n}\n```\n\n#### patterns.cson\nType: `String`\n\nIf an attribute `cson` found in pattern definition will be converted and then processed like [json attribute](#patternsjson).\n\n```javascript\n{\n  patterns: [\n    {\n      cson: 'key: \\'value\\''\n    }\n  ]\n}\n```\n\n#### variables\nType: `Object`\n\nThis is the old way to define patterns using plain object (simple variable lookup mechanism and no regexp support), you can still using but for more control you should use the new `patterns` way.\n\n```javascript\n{\n  variables: {\n    'key': 'value' // replaces \"@@key\" to \"value\"\n  }\n}\n```\n\n#### prefix\nType: `String`\nDefault: `@@`\n\nThe prefix added for matching (prevent bad replacements / easy way).\n\n> This only applies for simple variable lookup mechanism.\n\n#### usePrefix\nType: `Boolean`\nDefault: `true`\n\nIf set to `false`, we match the pattern without `prefix` concatenation (useful when you want to lookup an simple string).\n\n> This only applies for simple variable lookup mechanism.\n\n#### preservePrefix\nType: `Boolean`\nDefault: `false`\n\nIf set to `true`, we preserve the `prefix` in target.\n\n> This only applies for simple variable lookup mechanism and `patterns.replacement` is an string.\n\n#### delimiter\nType: `String`\nDefault: `.`\n\nThe delimiter used to flatten when using object as replacement.\n\n#### preserveOrder\nType: `Boolean`\nDefault: `false`\n\nIf set to `true`, we preserve the patterns definition order, otherwise these will be sorted (in ascending order) to prevent replacement issues like `head` / `header` (typo regexps will be resolved at last).\n\n\n### Usage Examples\n\n#### Basic\n\nFile `src/manifest.appcache`:\n\n```\nCACHE MANIFEST\n# @@timestamp\n\nCACHE:\n\nfavicon.ico\nindex.html\n\nNETWORK:\n*\n```\n\nBroccolifile:\n\n```js\nmodule.exports = function (broccoli) {\n  var replace = require('broccoli-replace');\n  var srcFiles = broccoli.makeTree('src');\n  srcFiles = replace(srcFiles, {\n    files: [\n      'manifest.appcache'\n    ],\n    patterns: [\n      {\n        match: 'timestamp',\n        replacement: new Date().getTime()\n      }\n    ]\n  });\n  return [srcFiles];\n};\n```\n\n#### Multiple matching\n\nFile `src/manifest.appcache`:\n\n```\nCACHE MANIFEST\n# @@timestamp\n\nCACHE:\n\nfavicon.ico\nindex.html\n\nNETWORK:\n*\n```\n\nFile `src/humans.txt`:\n\n```\n              __     _\n   _    _/__  /./|,//_`\n  /_//_// /_|///  //_, outaTiME v.@@version\n\n/* TEAM */\n  Web Developer / Graphic Designer: Ariel Oscar Falduto\n  Site: http://www.outa.im\n  Twitter: @outa7iME\n  Contact: afalduto at gmail dot com\n  From: Buenos Aires, Argentina\n\n/* SITE */\n  Last update: @@timestamp\n  Standards: HTML5, CSS3, robotstxt.org, humanstxt.org\n  Components: H5BP, Modernizr, jQuery, Twitter Bootstrap, LESS, Jade, Grunt\n  Software: Sublime Text 2, Photoshop, LiveReload\n\n```\n\nBroccolifile:\n\n```js\nmodule.exports = function (broccoli) {\n  var pkg = require('./package.json');\n  var replace = require('broccoli-replace');\n  var srcFiles = broccoli.makeTree('src');\n  srcFiles = replace(srcFiles, {\n    files: [\n      'manifest.appcache',\n      'humans.txt'\n    ],\n    patterns: [\n      {\n        match: 'version',\n        replacement: pkg.version\n      },\n      {\n        match: 'timestamp',\n        replacement: new Date().getTime()\n      }\n    ]\n  });\n  return [srcFiles];\n};\n```\n\n#### Cache busting\n\nFile `src/index.html`:\n\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"/css/style.css?rel=@@timestamp\">\n  <script src=\"/js/app.js?rel=@@timestamp\"></script>\n</head>\n```\n\nBroccolifile:\n\n```js\nmodule.exports = function (broccoli) {\n  var replace = require('broccoli-replace');\n  var srcFiles = broccoli.makeTree('src');\n  srcFiles = replace(srcFiles, {\n    files: [\n      'index.html'\n    ],\n    patterns: [\n      {\n        match: 'timestamp',\n        replacement: new Date().getTime()\n      }\n    ]\n  });\n  return [srcFiles];\n};\n```\n\n#### Include file\n\nFile `src/index.html`:\n\n```html\n<body>\n  @@include\n</body>\n```\n\nBroccolifile:\n\n```js\nmodule.exports = function (broccoli) {\n  var fs = require('fs');\n  var replace = require('broccoli-replace');\n  var srcFiles = broccoli.makeTree('src');\n  srcFiles = replace(srcFiles, {\n    files: [\n      'index.html'\n    ],\n    patterns: [\n      {\n        match: 'include',\n        replacement: fs.readFileSync('./includes/content.html', 'utf8')\n      }\n    ]\n  });\n  return [srcFiles];\n};\n```\n\n#### Regular expression\n\nFile `src/username.txt`:\n\n```\nJohn Smith\n```\n\nBroccolifile:\n\n```js\nmodule.exports = function (broccoli) {\n  var replace = require('broccoli-replace');\n  var srcFiles = broccoli.makeTree('src');\n  srcFiles = replace(srcFiles, {\n    files: [\n      'username.txt'\n    ],\n    patterns: [\n      {\n        match: /(\\w+)\\s(\\w+)/,\n        replacement: '$2, $1' // replaces \"John Smith\" to \"Smith, John\"\n      }\n    ]\n  });\n  return [srcFiles];\n};\n```\n\n#### Lookup for `foo` instead of `@@foo`\n\nBroccolifile:\n\n```js\nmodule.exports = function (broccoli) {\n  var replace = require('broccoli-replace');\n  var srcFiles = broccoli.makeTree('src');\n\n  // option 1 (explicitly using an regexp)\n  var replacer_op1 = replace(srcFiles, {\n    files: [\n      'foo.txt'\n    ],\n    patterns: [\n      {\n        match: /foo/g,\n        replacement: 'bar'\n      }\n    ]\n  });\n\n  // option 2 (easy way)\n  var replacer_op2 = replace(srcFiles, {\n    files: [\n      'foo.txt'\n    ],\n    patterns: [\n      {\n        match: 'foo',\n        replacement: 'bar'\n      }\n    ],\n    usePrefix: false\n  });\n\n  // option 3 (old way)\n  var replacer_op3 = replace(srcFiles, {\n    files: [\n      'foo.txt'\n    ],\n    patterns: [\n      {\n        match: 'foo',\n        replacement: 'bar'\n      }\n    ],\n    prefix: '' // remove prefix\n  });\n\n  return [replacer_op1, replacer_op2, replacer_op3];\n};\n```\n\n## Release History\n\n * 2014-03-23â€ƒâ€ƒâ€ƒv0.1.5â€ƒâ€ƒâ€ƒReadme updated.\n * 2014-03-22â€ƒâ€ƒâ€ƒv0.1.4â€ƒâ€ƒâ€ƒModular core renamed to [applause](https://github.com/outaTiME/applause). Performance improvements. Expression flag removed. New pattern matching for CSON object. More test cases, readme updated and code cleanup.\n * 2014-03-21â€ƒâ€ƒâ€ƒv0.1.3â€ƒâ€ƒâ€ƒTest cases in Mocha, readme updated and code cleanup.\n * 2014-03-15â€ƒâ€ƒâ€ƒv0.1.2â€ƒâ€ƒâ€ƒNew [pattern-replace](https://github.com/outaTiME/pattern-replace) modular core for replacements.\n * 2014-02-26â€ƒâ€ƒâ€ƒv0.0.4â€ƒâ€ƒâ€ƒFix issue when no replacement found.\n * 2014-02-25â€ƒâ€ƒâ€ƒv0.0.3â€ƒâ€ƒâ€ƒCode normalization and documentation updated.\n * 2014-02-23â€ƒâ€ƒâ€ƒv0.0.2â€ƒâ€ƒâ€ƒUse Filter instead of Transformer.\n * 2014-02-22â€ƒâ€ƒâ€ƒv0.0.1â€ƒâ€ƒâ€ƒInitial version.\n\n---\n\nTask submitted by [Ariel Falduto](http://outa.im/)\n",
  "readmeFilename": "README.md",
  "_id": "broccoli-replace@0.1.5",
  "_from": "broccoli-replace@0.1.5"
}
