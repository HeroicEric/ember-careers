{
  "name": "applause",
  "description": "Replace text patterns with a given replacement.",
  "version": "0.3.1",
  "homepage": "https://github.com/outaTiME/applause",
  "author": {
    "name": "outaTiME",
    "email": "afalduto@gmail.com",
    "url": "http://outa.im/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/outaTiME/applause"
  },
  "bugs": {
    "url": "https://github.com/outaTiME/applause/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/outaTiME/applause/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "release": "scripts/release.sh",
    "test": "grunt test"
  },
  "dependencies": {
    "lodash": "~2.4.1",
    "js-yaml": "~3.0.1",
    "cson": "~1.4.5"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-mocha-test": "~0.10.0"
  },
  "keywords": [
    "replace",
    "replacement",
    "pattern",
    "patterns",
    "match",
    "text",
    "string",
    "regex",
    "regexp",
    "json",
    "yaml",
    "flatten"
  ],
  "main": "src/applause.js",
  "files": [
    "src",
    "LICENSE-MIT"
  ],
  "readme": "# Applause [![Build Status](https://secure.travis-ci.org/outaTiME/applause.png?branch=master)](http://travis-ci.org/outaTiME/applause)\n\nReplace text patterns with a given replacement.\n\n## Install\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n```shell\nnpm install applause -g\n```\n\nFrom NPM for programmatic use:\n\n```shell\nnpm install applause\n```\n\nFrom Git:\n\n```shell\ngit clone git://github.com/outaTiME/applause\ncd applause\nnpm link .\n```\n\n## API Reference\n\nAssuming installation via NPM, you can use `applause` in your application like this:\n\n```javascript\nvar fs = require('fs');\nvar Applause = require('applause');\nvar options = {\n  patterns: [\n    {\n      match: 'foo',\n      replacement: 'bar'\n    }\n  ]\n};\nvar applause = Applause.create(options);\nvar contents = '@@foo';\nvar result = applause.replace(contents);\nconsole.log(result); // bar\n```\n\n### Applause Options\n\n#### patterns\nType: `Array`\n\nDefine patterns that will be used to replace the contents of source files.\n\n#### patterns.match\nType: `String|RegExp`\n\nIndicates the matching expression.\n\nIf matching type is `String` we use a simple variable lookup mechanism `@@string` (in any other case we use the default regexp replace logic):\n\n```javascript\n{\n  patterns: [\n    {\n      match: 'foo',\n      replacement: 'bar'  // replaces \"@@foo\" to \"bar\"\n    }\n  ]\n}\n```\n\n#### patterns.replacement\nType: `String|Function|Object`\n\nIndicates the replacement for match, for more information about replacement check out the [String.replace].\n\nYou can specify a function as replacement. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string.\n\n```javascript\n{\n  patterns: [\n    {\n      match: /foo/g,\n      replacement: function () {\n        return 'bar'; // replaces \"foo\" to \"bar\"\n      }\n    }\n  ]\n}\n```\n\nAlso supports object as replacement (we create string representation of object using [JSON.stringify]):\n\n```javascript\n{\n  patterns: [\n    {\n      match: /foo/g,\n      replacement: [1, 2, 3] // replaces \"foo\" with string representation of \"array\" object\n    }\n  ]\n}\n```\n\n[String.replace]: http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n[JSON.stringify]: http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\n#### patterns.json\nType: `Object`\n\nIf an attribute `json` found in pattern definition we flatten the object using `delimiter` concatenation and each keyâ€“value pair will be used for the replacement (simple variable lookup mechanism and no regexp support).\n\n```javascript\n{\n  patterns: [\n    {\n      json: {\n        \"key\": \"value\" // replaces \"@@key\" to \"value\"\n      }\n    }\n  ]\n}\n```\n\nAlso supports nested objects:\n\n```javascript\n{\n  patterns: [\n    {\n      json: {\n        \"key\": \"value\",   // replaces \"@@key\" to \"value\"\n        \"inner\": {        // replaces \"@@inner\" with string representation of \"inner\" object\n          \"key\": \"value\"  // replaces \"@@inner.key\" to \"value\"\n        }\n      }\n    }\n  ]\n}\n```\n\n#### patterns.yaml\nType: `String`\n\nIf an attribute `yaml` found in pattern definition will be converted and then processed like [json attribute](#patternsjson).\n\n```javascript\n{\n  patterns: [\n    {\n      yaml: 'key: value'  // replaces \"@@key\" to \"value\"\n    }\n  ]\n}\n```\n\n#### patterns.cson\nType: `String`\n\nIf an attribute `cson` found in pattern definition will be converted and then processed like [json attribute](#patternsjson).\n\n```javascript\n{\n  patterns: [\n    {\n      cson: 'key: \\'value\\''\n    }\n  ]\n}\n```\n\n#### variables\nType: `Object`\n\nThis is the old way to define patterns using plain object (simple variable lookup mechanism and no regexp support), you can still using but for more control you should use the new `patterns` way.\n\n```javascript\n{\n  variables: {\n    'key': 'value' // replaces \"@@key\" to \"value\"\n  }\n}\n```\n\n#### prefix\nType: `String`\nDefault: `@@`\n\nThe prefix added for matching (prevent bad replacements / easy way).\n\n> This only applies for simple variable lookup mechanism.\n\n#### usePrefix\nType: `Boolean`\nDefault: `true`\n\nIf set to `false`, we match the pattern without `prefix` concatenation (useful when you want to lookup an simple string).\n\n> This only applies for simple variable lookup mechanism.\n\n#### preservePrefix\nType: `Boolean`\nDefault: `false`\n\nIf set to `true`, we preserve the `prefix` in target.\n\n> This only applies for simple variable lookup mechanism and `patterns.replacement` is an string.\n\n#### delimiter\nType: `String`\nDefault: `.`\n\nThe delimiter used to flatten when using object as replacement.\n\n#### preserveOrder\nType: `Boolean`\nDefault: `false`\n\nIf set to `true`, we preserve the patterns definition order, otherwise these will be sorted (in ascending order) to prevent replacement issues like `head` / `header` (typo regexps will be resolved at last).\n\n### Usage Examples\n\n#### Basic\n\nFile `src/manifest.appcache`:\n\n```\nCACHE MANIFEST\n# @@timestamp\n\nCACHE:\n\nfavicon.ico\nindex.html\n\nNETWORK:\n*\n```\n\nNode:\n\n```js\nvar fs = require('fs');\nvar Applause = require('applause');\nvar options = {\n  patterns: [\n    {\n      match: 'timestamp',\n      replacement: new Date().getTime()\n    }\n  ]\n};\nvar applause = Applause.create(options);\nvar contents = fs.readFileSync('./src/manifest.appcache', 'utf8');\nvar result = applause.replace(contents);\nconsole.log(result); // replaced output\n```\n\n#### Multiple matching\n\nFile `src/manifest.appcache`:\n\n```\nCACHE MANIFEST\n# @@timestamp\n\nCACHE:\n\nfavicon.ico\nindex.html\n\nNETWORK:\n*\n```\n\n\nFile `src/humans.txt`:\n\n```\n              __     _\n   _    _/__  /./|,//_`\n  /_//_// /_|///  //_, outaTiME v.@@version\n\n/* TEAM */\n  Web Developer / Graphic Designer: Ariel Oscar Falduto\n  Site: http://www.outa.im\n  Twitter: @outa7iME\n  Contact: afalduto at gmail dot com\n  From: Buenos Aires, Argentina\n\n/* SITE */\n  Last update: @@timestamp\n  Standards: HTML5, CSS3, robotstxt.org, humanstxt.org\n  Components: H5BP, Modernizr, jQuery, Twitter Bootstrap, LESS, Jade, Grunt\n  Software: Sublime Text 2, Photoshop, LiveReload\n\n```\n\nNode:\n\n```js\nvar fs = require('fs');\nvar pkg = require('./package.json');\nvar Applause = require('applause');\nvar options = {\n  patterns: [\n    {\n      match: 'version',\n      replacement: pkg.version\n    },\n    {\n      match: 'timestamp',\n      replacement: new Date().getTime()\n    }\n  ]\n};\nvar applause = Applause.create(options);\nvar contents = fs.readFileSync('./src/manifest.appcache', 'utf8');\nvar result = applause.replace(contents);\nconsole.log(result); // replaced output\ncontents = fs.readFileSync('./src/humans.txt', 'utf8');\nresult = applause.replace(contents);\nconsole.log(result); // replaced output\n```\n\n#### Cache busting\n\nFile `src/index.html`:\n\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"/css/style.css?rel=@@timestamp\">\n  <script src=\"/js/app.js?rel=@@timestamp\"></script>\n</head>\n```\n\nNode:\n\n```js\nvar fs = require('fs');\nvar Applause = require('applause');\nvar options = {\n  patterns: [\n    {\n      match: 'timestamp',\n      replacement: new Date().getTime()\n    }\n  ]\n};\nvar applause = Applause.create(options);\nvar contents = fs.readFileSync('./src/index.html', 'utf8');\nvar result = applause.replace(contents);\nconsole.log(result); // replaced output\n```\n\n#### Include file\n\nFile `src/index.html`:\n\n```html\n<body>\n  @@include\n</body>\n```\n\nNode:\n\n```js\nvar fs = require('fs');\nvar Applause = require('applause');\nvar options = {\n  patterns: [\n    {\n      match: 'include',\n      replacement: fs.readFileSync('./includes/content.html', 'utf8')\n    }\n  ]\n};\nvar applause = Applause.create(options);\nvar contents = fs.readFileSync('./src/index.html', 'utf8');\nvar result = applause.replace(contents);\nconsole.log(result); // replaced output\n```\n\n#### Regular expression\n\nFile `src/username.txt`:\n\n```\nJohn Smith\n```\n\nNode:\n\n```js\nvar fs = require('fs');\nvar Applause = require('applause');\nvar options = {\n  patterns: [\n    {\n      match: /(\\w+)\\s(\\w+)/,\n      replacement: '$2, $1' // replaces \"John Smith\" to \"Smith, John\"\n    }\n  ]\n};\nvar applause = Applause.create(options);\nvar contents = fs.readFileSync('./username.txt', 'utf8');\nvar result = applause.replace(contents);\nconsole.log(result); // replaced output\n```\n\n#### Lookup for `foo` instead of `@@foo`\n\nNode:\n\n```js\nvar Applause = require('applause');\n\n// option 1 (explicitly using an regexp)\nvar applause_op1 = Applause.create({\n  patterns: [\n    {\n      match: /foo/g,\n      replacement: 'bar'\n    }\n  ]\n});\n\n// option 2 (easy way)\nvar applause_op2 = Applause.create({\n  patterns: [\n    {\n      match: 'foo',\n      replacement: 'bar'\n    }\n  ],\n  usePrefix: false\n});\n\n// option 3 (old way)\nvar applause_op3 = Applause.create({\n  patterns: [\n    {\n      match: 'foo',\n      replacement: 'bar'\n    }\n  ],\n  prefix: '' // remove prefix\n});\n```\n\n## Command Line\n\n_(Coming soon)_\n\n## Release History\n\n * 2014-03-23â€ƒâ€ƒâ€ƒv0.3.1â€ƒâ€ƒâ€ƒReadme updated.\n * 2014-03-22â€ƒâ€ƒâ€ƒv0.3.0â€ƒâ€ƒâ€ƒPerformance improvements. Expression flag removed. New pattern matching for CSON object. More test cases, readme updated and code cleanup.\n * 2014-03-21â€ƒâ€ƒâ€ƒv0.2.0â€ƒâ€ƒâ€ƒProject rename from `pattern-replace` to `applause` (thanks Lady Gaga). Test cases in Mocha and readme updated.\n * 2014-03-11â€ƒâ€ƒâ€ƒv0.1.2â€ƒâ€ƒâ€ƒNew pattern matching for YAML object. New preserveOrder flag.\n * 2014-02-26â€ƒâ€ƒâ€ƒv0.1.1â€ƒâ€ƒâ€ƒRemove the force flag (only applies in grunt plugin).\n * 2014-02-25â€ƒâ€ƒâ€ƒv0.1.0â€ƒâ€ƒâ€ƒInitial version.\n\n---\n\nTask submitted by [Ariel Falduto](http://outa.im/)\n",
  "readmeFilename": "README.md",
  "_id": "applause@0.3.1",
  "_from": "applause@0.3.1"
}
